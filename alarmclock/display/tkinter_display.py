#!/usr/bin/python
# -*- coding: utf-8 -*-

import Tkinter as tk
import logging
from threading import Thread
from display import Display

NICE_WEATHER = [
			[ 0x00, 0x00, 0x08, 0x1C, 0x08, 0x00, 0x00 ],
			[ 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14, 0x00 ],
			[ 0x22, 0x14, 0x08, 0x7F, 0x08, 0x14, 0x22 ],
]

SPECIALS = {
			"nice_weather": NICE_WEATHER
}

# mycode
SMALL_FONT = [
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ], # SPACE
			[ 0x00, 0x00, 0x00, 0x4F, 0x00, 0x00 ], # !
			[ 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 ], # "
			[ 0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14 ], # #
			[ 0x00, 0x24, 0x2A, 0x7F, 0x2A, 0x12 ], # $
			[ 0x00, 0x23, 0x13, 0x08, 0x64, 0x62 ], # %
			[ 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 ], # &
			[ 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 ], # '
			[ 0x00, 0x00, 0x1C, 0x22, 0x41, 0x00 ], # (
			[ 0x00, 0x00, 0x41, 0x22, 0x1C, 0x00 ], # )
			[ 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 ], # *
			[ 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 ], # +
			[ 0x00, 0x00, 0x50, 0x30, 0x00, 0x00 ], # ,
			[ 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 ], # -
			[ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 ], # .
			[ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 ], # /
			[ 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E ], # 0
			[ 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 ], # 1
			[ 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 ], # 2
			[ 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 ], # 3
			[ 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 ], # 4
			[ 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 ], # 5
			[ 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 ], # 6
			[ 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 ], # 7
			[ 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 ], # 8
			[ 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E ], # 9
			[ 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 ], # :
			[ 0x00, 0x56, 0x36, 0x00, 0x00, 0x00 ], # ;
			[ 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 ], # <
			[ 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 ], # =
			[ 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 ], # >
			[ 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 ], # ?
			[ 0x00, 0x30, 0x49, 0x79, 0x41, 0x3E ], # @
			[ 0x00, 0x7E, 0x11, 0x11, 0x11, 0x7E ], # A
			[ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 ], # B
			[ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 ], # C
			[ 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C ], # D
			[ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 ], # E
			[ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 ], # F
			[ 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A ], # G
			[ 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F ], # H
			[ 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 ], # I
			[ 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 ], # J
			[ 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 ], # K
			[ 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 ], # L
			[ 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F ], # M
			[ 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F ], # N
			[ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E ], # O
			[ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 ], # P
			[ 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E ], # Q
			[ 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 ], # R
			[ 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 ], # S
			[ 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 ], # T
			[ 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F ], # U
			[ 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F ], # V
			[ 0x00, 0x3F, 0x40, 0x30, 0x40, 0x3F ], # W
			[ 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 ], # X
			[ 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 ], # Y
			[ 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 ], # Z
			[ 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 ], # [
			[ 0x00, 0x02, 0x04, 0x08, 0x10, 0x20 ], # backslash
			[ 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 ], # ]
			[ 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 ], # ^
			[ 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 ], # _
			[ 0x00, 0x04, 0x0A, 0x04, 0x00, 0x00 ], # `
			[ 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 ], # a
			[ 0x00, 0x7F, 0x50, 0x48, 0x48, 0x30 ], # b
			[ 0x00, 0x38, 0x44, 0x44, 0x44, 0x00 ], # c
			[ 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F ], # d
			[ 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 ], # e
			[ 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 ], # f
			[ 0x00, 0x0C, 0x52, 0x52, 0x52, 0x3E ], # g
			[ 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 ], # h
			[ 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 ], # i
			[ 0x00, 0x20, 0x40, 0x44, 0x3D, 0x00 ], # j
			[ 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 ], # k
			[ 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 ], # l
			[ 0x00, 0x78, 0x04, 0x78, 0x04, 0x78 ], # m
			[ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 ], # n
			[ 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 ], # o
			[ 0x00, 0x7C, 0x14, 0x14, 0x14, 0x08 ], # p
			[ 0x00, 0x08, 0x14, 0x14, 0x18, 0x7C ], # q
			[ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 ], # r
			[ 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 ], # s
			[ 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 ], # t
			[ 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C ], # u
			[ 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C ], # v
			[ 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C ], # w
			[ 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 ], # x
			[ 0x00, 0x0C, 0x50, 0x50, 0x50, 0x3C ], # y
			[ 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 ], # z
			[ 0x00, 0x00, 0x08, 0x36, 0x41, 0x00 ], # [
			[ 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00 ], # |
			[ 0x00, 0x00, 0x41, 0x36, 0x08, 0x00 ], # ]
			[ 0x00, 0x0C, 0x02, 0x0C, 0x10, 0x0C ], # ~
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ], # DEL
		]
	
def _create_circle(self, x, y, r, **kwargs):
	return self.create_oval(x-r, y-r, x+r, y+r, **kwargs)
	
class TKinterDisplay(Display):

	DISPLAY_SIZE = 8
	DISPLAY_AMOUNT = 4
	DISPLAY_LENGTH = DISPLAY_AMOUNT * DISPLAY_SIZE

	def __init__(self, dimmer):
		Display.__init__(self, dimmer)
		self._brightness = 0
		self._special_index = 0
		
		# init processing stuff
		self._data = [0] * self.DISPLAY_LENGTH # 32 ints field
		
		# init ui
		self._root = tk.Tk()
		self._canvas = tk.Canvas(self._root, width=490, height=130, borderwidth=0, highlightthickness=0, bg="black")
		self._init_internal()
		
	def _init_internal(self):
		
		self._canvas = tk.Canvas(self._root, width=490, height=130, borderwidth=0, highlightthickness=0, bg="black")
		self._canvas.grid()
		tk.Canvas.create_circle = _create_circle
		
		self._draw_circles()
		self._canvas.pack()
		
		# title
		self._root.wm_title("Dot Matrix")
				
		# start threaded
		def mainloop():
			self._root.mainloop()
		thread = Thread(target = mainloop)
		thread.start()
		
	def set_brightness(self, bright):
		self._brightness = bright
	
	def get_max_brightness(self):
		# default
		return 15
		
	def get_brightness(self):
		return self._brightness
	
	def _calc_color(self):
		switcher = {
			0: "#400700",
			1: "#400700",
			2: "#500800",
			3: "#500800",
			4: "#600A00",
			5: "#600A00",
			6: "#700B00",
			7: "#700B00",
			8: "#800D00",
			9: "#800D00",
			10: "#900E00",
			11: "#900E00",
			12: "#A01000",
			13: "#A01000",
			14: "#AF1100",
			15: "#AF1100"
		}
		return switcher.get(self._brightness)
	
	def _draw_circles(self, show_dots=True):
		#logging.debug("draw circles start")
		# create 1: 8x8 matrix
		dist = 15
		initial_dist = 10
		radius = 5
		
		# colors
		color1="#0E0B16"
		color2=self._calc_color() #"red"
		
		for i in range(self.DISPLAY_LENGTH):
			data = self._data[i]
			for j in range(self.DISPLAY_SIZE):
				d = data>>j

				#fg color
				col = color1
				#bg color
				outl = "#373737"
				
				if (d&1):
					col = color2
				else:
					if (not show_dots):
						col = "black"
						outl = "black"
				
				self._canvas.create_circle(initial_dist+dist*i, initial_dist+dist*j, radius, fill=col, outline=outl, width=1)
		
		#logging.debug("draw circles stop")
		
	def _display_text(self, alignment=2):
		src = [c for ascii_code in self._current_displaying for c in SMALL_FONT[ord(ascii_code)]]
		
		# copy of max7219
		# default margin left:
		margin = None
		if alignment == 0:
			margin = 0
		elif alignment == 1:
			margin = int(self.DISPLAY_LENGTH - len(src))
		elif alignment == 2:
			margin = int((self.DISPLAY_LENGTH - len(src))/2)
			
		# Reset the buffer so no traces of the previous message are left
		self._data = [0] * self.DISPLAY_LENGTH
		for pos, value in enumerate(src):
			self._data[margin+pos] = value
			
	def _display_special(self, alignment=2):
		src = SPECIALS[self._current_displaying][self._special_index]
		
		# copy of max7219
		# default margin left:
		margin = None
		if alignment == 0:
			margin = 0
		elif alignment == 1:
			margin = int(self.DISPLAY_LENGTH - len(src))
		elif alignment == 2:
			margin = int((self.DISPLAY_LENGTH - len(src))/2)
			
		# Reset the buffer so no traces of the previous message are left
		self._data = [0] * self.DISPLAY_LENGTH
		for pos, value in enumerate(src):
			self._data[margin+pos] = value
			
	def _update_internal_state(self):
		super(TKinterDisplay, self)._update_internal_state()
		if self._current_mode == self.MODES[3]:
			self._special_index = ( self._special_index + 1) % len(NICE_WEATHER)
			self._changed = True
		
	def show_special(self, special):
		# reset
		self._special_index = 0
		super(TKinterDisplay, self).show_special(special)
		
	def prepare_signal_1(self, value):
		if (value):
			self._data[0] = self._data[0] ^ 6
		else:
			self._data[0] = self._data[0] & 153
			
	def prepare_signal_2(self, value):
		# not yet implemented
		pass
	
	def _output(self):
		if self._current_mode == self.MODES[2]: # blank 
			self._data = [0] * self.DISPLAY_LENGTH
			self._draw_circles()
			return # make sure to not do anything else
		if self._current_mode == self.MODES[1]: # time displayed aligned right
			self._display_text(alignment=1)
		elif self._current_mode == self.MODES[0]: # text displayed centered
			self._display_text(alignment=2)
		elif self._current_mode == self.MODES[3]: # show special
			self._display_special()
			
		self.prepare_signal_1(self._signal1)
		self.prepare_signal_2(self._signal2)
		self._draw_circles()