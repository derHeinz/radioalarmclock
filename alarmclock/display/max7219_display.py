#!/usr/bin/python
# -*- coding: utf-8 -*-

import time
import max7219
from max7219.font import TINY_FONT
#import max7219.font.*
from max7219.led import matrix as mat
from display import Display

# mycode
SMALL_FONT = [
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ], # SPACE
			[ 0x00, 0x00, 0x00, 0x4F, 0x00, 0x00 ], # !
			[ 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 ], # "
			[ 0x00, 0x14, 0x7F, 0x14, 0x7F, 0x14 ], # #
			[ 0x00, 0x24, 0x2A, 0x7F, 0x2A, 0x12 ], # $
			[ 0x00, 0x23, 0x13, 0x08, 0x64, 0x62 ], # %
			[ 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 ], # &
			[ 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 ], # '
			[ 0x00, 0x00, 0x1C, 0x22, 0x41, 0x00 ], # (
			[ 0x00, 0x00, 0x41, 0x22, 0x1C, 0x00 ], # )
			[ 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 ], # *
			[ 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 ], # +
			[ 0x00, 0x00, 0x50, 0x30, 0x00, 0x00 ], # ,
			[ 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 ], # -
			[ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 ], # .
			[ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 ], # /
			[ 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E ], # 0
			[ 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 ], # 1
			[ 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 ], # 2
			[ 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 ], # 3
			[ 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 ], # 4
			[ 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 ], # 5
			[ 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 ], # 6
			[ 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 ], # 7
			[ 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 ], # 8
			[ 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E ], # 9
			[ 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 ], # :
			[ 0x00, 0x56, 0x36, 0x00, 0x00, 0x00 ], # ;
			[ 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 ], # <
			[ 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 ], # =
			[ 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 ], # >
			[ 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 ], # ?
			[ 0x00, 0x30, 0x49, 0x79, 0x41, 0x3E ], # @
			[ 0x00, 0x7E, 0x11, 0x11, 0x11, 0x7E ], # A
			[ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 ], # B
			[ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 ], # C
			[ 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C ], # D
			[ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 ], # E
			[ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 ], # F
			[ 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A ], # G
			[ 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F ], # H
			[ 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 ], # I
			[ 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 ], # J
			[ 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 ], # K
			[ 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 ], # L
			[ 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F ], # M
			[ 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F ], # N
			[ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E ], # O
			[ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 ], # P
			[ 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E ], # Q
			[ 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 ], # R
			[ 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 ], # S
			[ 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 ], # T
			[ 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F ], # U
			[ 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F ], # V
			[ 0x00, 0x3F, 0x40, 0x30, 0x40, 0x3F ], # W
			[ 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 ], # X
			[ 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 ], # Y
			[ 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 ], # Z
			[ 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 ], # [
			[ 0x00, 0x02, 0x04, 0x08, 0x10, 0x20 ], # backslash
			[ 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 ], # ]
			[ 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 ], # ^
			[ 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 ], # _
			[ 0x00, 0x04, 0x0A, 0x04, 0x00, 0x00 ], # `
			[ 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 ], # a
			[ 0x00, 0x7F, 0x50, 0x48, 0x48, 0x30 ], # b
			[ 0x00, 0x38, 0x44, 0x44, 0x44, 0x00 ], # c
			[ 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F ], # d
			[ 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 ], # e
			[ 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 ], # f
			[ 0x00, 0x0C, 0x52, 0x52, 0x52, 0x3E ], # g
			[ 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 ], # h
			[ 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 ], # i
			[ 0x00, 0x20, 0x40, 0x44, 0x3D, 0x00 ], # j
			[ 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 ], # k
			[ 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 ], # l
			[ 0x00, 0x78, 0x04, 0x78, 0x04, 0x78 ], # m
			[ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 ], # n
			[ 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 ], # o
			[ 0x00, 0x7C, 0x14, 0x14, 0x14, 0x08 ], # p
			[ 0x00, 0x08, 0x14, 0x14, 0x18, 0x7C ], # q
			[ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 ], # r
			[ 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 ], # s
			[ 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 ], # t
			[ 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C ], # u
			[ 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C ], # v
			[ 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C ], # w
			[ 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 ], # x
			[ 0x00, 0x0C, 0x50, 0x50, 0x50, 0x3C ], # y
			[ 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 ], # z
			[ 0x00, 0x00, 0x08, 0x36, 0x41, 0x00 ], # [
			[ 0x00, 0x00, 0x00, 0x7F, 0x00, 0x00 ], # |
			[ 0x00, 0x00, 0x41, 0x36, 0x08, 0x00 ], # ]
			[ 0x00, 0x0C, 0x02, 0x0C, 0x10, 0x0C ], # ~
			[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ], # DEL
		]
		
class Max7219Display(Display):

	def __init__(self, dimmer):
		Display.__init__(self, dimmer)
		self._display_matrix = Display4x8x8(cascaded=4, vertical=True)
		self._brightness = 7 # default brightness set by max7219

	def _output(self):
		if self._current_mode == self.MODES[2]: # blank 
			self._display_matrix.clear()
			return # make sure to not do anything else
		if self._current_mode == self.MODES[1]: # text displayed aligned right
			self._display_matrix.prepare_message_aligned(self._current_displaying, alignment=1, font=SMALL_FONT)
		elif self._current_mode == self.MODES[0]: # time displayed centered
			self._display_matrix.prepare_message_aligned(self._current_displaying, alignment=2, font=SMALL_FONT)
			
		self._display_matrix.prepare_signal_1(self._signal1)
		self._display_matrix.prepare_signal_2(self._signal2)
		self._display_matrix.flush() # using double buffering
		
	def set_brightness(self, bright):
		self._brightness = bright
		self._display_matrix.brightness(bright)
		
	def get_brightness(self):
		return self._brightness 

	def get_max_brightness(self):
		# default
		return 15
	
class Display4x8x8(mat):

	def prepare_message_aligned(self, text, alignment=2, font=None):
		"""
		Prepares the given message to be outputted to the device using flush().
		alignment=0: left, alignment=1: right, alignment=2: center
		"""
		if not font:
			font = DEFAULT_FONT

		display_length = self.NUM_DIGITS * self._cascaded
		src = [c for ascii_code in text for c in font[ord(ascii_code)]]
		# How much margin we need on the left so it's centered
		# old margin to center:
		#margin = int((display_length - len(src))/2)
		# new margin to align right

		# default margin left:
		margin = None
		if alignment == 0:
			margin = 0
		elif alignment == 1:
			margin = int(display_length - len(src))
		elif alignment == 2:
			margin = int((display_length - len(src))/2)
			
		# Reset the buffer so no traces of the previous message are left
		self._buffer = [0] * display_length
		for pos, value in enumerate(src):
			self._buffer[margin+pos] = value
			
	def prepare_signal_1(self, value):
		self.pixel(0, 1, value, False)
		self.pixel(0, 2, value, False)
		#self.pixel(1, 1, value, False)
		#self.pixel(1, 2, value, False)
			
	def prepare_signal_2(self, value):
		self.pixel(0, 5, value, False)
		self.pixel(0, 6, value, False)
		#self.pixel(1, 5, value, False)
		#self.pixel(1, 6, value, False)
		
	def show_message_aligned(self, text, align_right=True, font=None):
		"""
        Shows a message on the device. Used to show times, aligned to the right.
        """
		self.prepare_message_aligned(text, align_right, font)
		self.flush()
		